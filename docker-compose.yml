version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: content-ops-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/init:/docker-entrypoint-initdb.d
      - ./database/backups:/backups
    ports:
      - "3306:3306"
    networks:
      - content-ops-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: content-ops-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - content-ops-network

  # WordPress Site 1
  wordpress-site1:
    image: wordpress:latest
    container_name: content-ops-wp-site1
    restart: unless-stopped
    depends_on:
      - mysql
      - redis
    environment:
      WORDPRESS_DB_HOST: ${WORDPRESS_DB_HOST}
      WORDPRESS_DB_NAME: ${WORDPRESS_DB_NAME}
      WORDPRESS_DB_USER: ${WORDPRESS_DB_USER}
      WORDPRESS_DB_PASSWORD: ${WORDPRESS_DB_PASSWORD}
      WORDPRESS_TABLE_PREFIX: site1_
      WORDPRESS_CONFIG_EXTRA: |
        define('WP_REDIS_HOST', 'redis');
        define('WP_REDIS_PASSWORD', '${REDIS_PASSWORD}');
        define('WP_REDIS_PORT', 6379);
        define('WP_REDIS_DATABASE', 0);
    volumes:
      - wordpress_site1_data:/var/www/html
      - ./wordpress/site1/wp-content:/var/www/html/wp-content
      - ./wordpress/shared-config:/var/www/html/wp-content/mu-plugins
    networks:
      - content-ops-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.site1.rule=Host(`${SITE1_DOMAIN}`)"

  # WordPress Site 2
  wordpress-site2:
    image: wordpress:latest
    container_name: content-ops-wp-site2
    restart: unless-stopped
    depends_on:
      - mysql
      - redis
    environment:
      WORDPRESS_DB_HOST: ${WORDPRESS_DB_HOST}
      WORDPRESS_DB_NAME: ${WORDPRESS_DB_NAME}
      WORDPRESS_DB_USER: ${WORDPRESS_DB_USER}
      WORDPRESS_DB_PASSWORD: ${WORDPRESS_DB_PASSWORD}
      WORDPRESS_TABLE_PREFIX: site2_
      WORDPRESS_CONFIG_EXTRA: |
        define('WP_REDIS_HOST', 'redis');
        define('WP_REDIS_PASSWORD', '${REDIS_PASSWORD}');
        define('WP_REDIS_PORT', 6379);
        define('WP_REDIS_DATABASE', 1);
    volumes:
      - wordpress_site2_data:/var/www/html
      - ./wordpress/site2/wp-content:/var/www/html/wp-content
      - ./wordpress/shared-config:/var/www/html/wp-content/mu-plugins
    networks:
      - content-ops-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.site2.rule=Host(`${SITE2_DOMAIN}`)"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: content-ops-nginx
    restart: unless-stopped
    depends_on:
      - wordpress-site1
      - wordpress-site2
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/sites:/etc/nginx/sites-available
      - ./nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    networks:
      - content-ops-network

  # Python Automation Services
  automation:
    build:
      context: ./python-automation
      dockerfile: Dockerfile
    container_name: content-ops-automation
    restart: unless-stopped
    depends_on:
      - mysql
      - redis
      - wordpress-site1
      - wordpress-site2
    environment:
      MYSQL_HOST: mysql
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      R2_ACCOUNT_ID: ${R2_ACCOUNT_ID}
      R2_ACCESS_KEY_ID: ${R2_ACCESS_KEY_ID}
      R2_SECRET_ACCESS_KEY: ${R2_SECRET_ACCESS_KEY}
      R2_BUCKET_NAME: ${R2_BUCKET_NAME}
      R2_ENDPOINT: ${R2_ENDPOINT}
      TZ: ${TZ:-UTC}
    volumes:
      - ./python-automation/src:/app/src
      - ./python-automation/scripts:/app/scripts
      - ./database/backups:/app/backups
      - automation_logs:/app/logs
    networks:
      - content-ops-network

  # Cron Scheduler
  cron:
    image: alpine:latest
    container_name: content-ops-cron
    restart: unless-stopped
    depends_on:
      - automation
    command: crond -f -l 2
    environment:
      TZ: ${TZ:-UTC}
    volumes:
      - ./cron/crontab:/etc/crontabs/root
      - cron_logs:/var/log
    networks:
      - content-ops-network

volumes:
  mysql_data:
  redis_data:
  wordpress_site1_data:
  wordpress_site2_data:
  nginx_logs:
  automation_logs:
  cron_logs:

networks:
  content-ops-network:
    driver: bridge